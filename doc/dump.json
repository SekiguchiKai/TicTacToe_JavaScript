[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/board.js",
    "content": "\n// フィールドをprivate化するための処理\nlet _rowSize = new WeakMap();\nlet _columnSize = new WeakMap();\nlet _gameBoard = new WeakMap();\n\n/**\n * ゲーム盤を表すためのクラス\n */\nexport default class Board {\n\n    /**\n     * コンストラクタ\n     * @param {rowSize} rowのサイズ\n     * @param {columnSize} columnのサイズ\n     */\n    constructor(rowSize, columnSize) {\n        // WeakMapに対応づけ\n        _rowSize.set(this, rowSize);\n        _columnSize.set(this, columnSize);\n        _gameBoard.set(this, new Array(3));\n\n        for (let row = 0; row < _gameBoard.get(this).length; row++) {\n            _gameBoard.get(this)[row] = new Array(3);\n        }\n\n        // 二次元配列初期化\n        for (let row = 0; row < _rowSize.get(this); row++) {\n            for (let column = 0; column < _columnSize.get(this); column++) {\n                _gameBoard.get(this)[row][column] = ' ';\n            }\n        }\n    }\n\n    /**\n     * rowSizeを取得するためのメソッド\n     * @return {number} rowのサイズ\n     */\n    getRowSize() {\n        return _rowSize.get(this);\n    }\n\n    /** \n     * columnSizeを取得するためのメソッド\n     * @return {number} columnのサイズ\n     */\n    getColumnSize() {\n        return _columnSize.get(this);\n    }\n\n    /**\n     * ゲーム盤の指定箇所に打ち手を加えるためのメソッド\n     * @param {row} rowの値\n     * @param {column} columnの値\n     * @param {move} 打ち手\n     */\n    putMove(row, column, move) {\n        _gameBoard.get(this)[row][column] = move;\n    }\n\n    /**\n      * ゲーム盤の指定箇所の打ち手を取得するためのメソッド\n      * @param {row} rowの値\n      * @param {column} columnの値\n      * @return {string} 打ち手\n      */\n    getMove(row, column) {\n        return _gameBoard.get(this)[row][column];\n    }\n\n    /**\n      * ゲーム盤を取得するためのメソッド\n      * @return {string} 打ち手\n      */\n    getGameBoardState() {\n        return _gameBoard.get(this).concat();\n    }\n\n}\n\n\n\n",
    "static": true,
    "longname": "src/board.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "_rowSize",
    "memberof": "src/board.js",
    "static": true,
    "longname": "src/board.js~_rowSize",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/board.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "_columnSize",
    "memberof": "src/board.js",
    "static": true,
    "longname": "src/board.js~_columnSize",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/board.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "_gameBoard",
    "memberof": "src/board.js",
    "static": true,
    "longname": "src/board.js~_gameBoard",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/board.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "class",
    "name": "Board",
    "memberof": "src/board.js",
    "static": true,
    "longname": "src/board.js~Board",
    "access": null,
    "export": true,
    "importPath": "tic_tac_toe_js/src/board.js",
    "importStyle": "Board",
    "description": "ゲーム盤を表すためのクラス",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/board.js~Board",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/board.js~Board#constructor",
    "access": null,
    "description": "コンストラクタ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "rowSize"
        ],
        "spread": false,
        "optional": false,
        "name": "rowのサイズ",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "columnSize"
        ],
        "spread": false,
        "optional": false,
        "name": "columnのサイズ",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "getRowSize",
    "memberof": "src/board.js~Board",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/board.js~Board#getRowSize",
    "access": null,
    "description": "rowSizeを取得するためのメソッド",
    "lineNumber": 39,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rowのサイズ"
    }
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "getColumnSize",
    "memberof": "src/board.js~Board",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/board.js~Board#getColumnSize",
    "access": null,
    "description": "columnSizeを取得するためのメソッド",
    "lineNumber": 47,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "columnのサイズ"
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "putMove",
    "memberof": "src/board.js~Board",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/board.js~Board#putMove",
    "access": null,
    "description": "ゲーム盤の指定箇所に打ち手を加えるためのメソッド",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "row"
        ],
        "spread": false,
        "optional": false,
        "name": "rowの値",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "column"
        ],
        "spread": false,
        "optional": false,
        "name": "columnの値",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "move"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "getMove",
    "memberof": "src/board.js~Board",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/board.js~Board#getMove",
    "access": null,
    "description": "ゲーム盤の指定箇所の打ち手を取得するためのメソッド",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "row"
        ],
        "spread": false,
        "optional": false,
        "name": "rowの値",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "column"
        ],
        "spread": false,
        "optional": false,
        "name": "columnの値",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "打ち手"
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "getGameBoardState",
    "memberof": "src/board.js~Board",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/board.js~Board#getGameBoardState",
    "access": null,
    "description": "ゲーム盤を取得するためのメソッド",
    "lineNumber": 75,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "打ち手"
    }
  },
  {
    "__docId__": 11,
    "kind": "file",
    "name": "src/counter.js",
    "content": "let count = 1;\n/**\n * カウンターを表すためのクラス\n */\nexport default class Counter {\n\n    /**\n     * カウンターを1上げるためのメソッド\n     */\n    static upCount() {\n        count++;\n    }\n\n    /**\n     * カウンターを取得するためのメソッド\n     * @return {number} 現在のカウンターの値\n     */\n    static getCount() {\n        return count;\n    }\n\n    /**\n     * カウンターをリセットするためのメソッド\n     */\n    static resetCount() {\n        Counter.count = 0;\n    }\n}",
    "static": true,
    "longname": "src/counter.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "count",
    "memberof": "src/counter.js",
    "static": true,
    "longname": "src/counter.js~count",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/counter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "class",
    "name": "Counter",
    "memberof": "src/counter.js",
    "static": true,
    "longname": "src/counter.js~Counter",
    "access": null,
    "export": true,
    "importPath": "tic_tac_toe_js/src/counter.js",
    "importStyle": "Counter",
    "description": "カウンターを表すためのクラス",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "upCount",
    "memberof": "src/counter.js~Counter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/counter.js~Counter.upCount",
    "access": null,
    "description": "カウンターを1上げるためのメソッド",
    "lineNumber": 10,
    "params": []
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "getCount",
    "memberof": "src/counter.js~Counter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/counter.js~Counter.getCount",
    "access": null,
    "description": "カウンターを取得するためのメソッド",
    "lineNumber": 18,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在のカウンターの値"
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "resetCount",
    "memberof": "src/counter.js~Counter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/counter.js~Counter.resetCount",
    "access": null,
    "description": "カウンターをリセットするためのメソッド",
    "lineNumber": 25,
    "params": []
  },
  {
    "__docId__": 17,
    "kind": "file",
    "name": "src/cpu.js",
    "content": "import MiniMax from './miniMax.js';\nlet miniMax = new MiniMax();\n\n/**\n * CPUのプレーヤーを表すためのクラス\n */\nexport default class Cpu {\n\n    /**\n     * 打ち手を打つためのメソッド\n     * @param {depth} 読みの深さ\n     * @param {board} Boardクラスのインスタンス\n     */\n    doMove(depth, board) {\n\n        console.log('doMoveメソッドが呼び出されました');\n\n        let cellObj = miniMax.calcMiniMax(depth, board, '×', -9999999999, 9999999999);\n\n        console.log(cellObj);\n\n        board.putMove(cellObj.rowVal, cellObj.columnVal, '×');\n\n        let e = document.getElementById(cellObj.rowVal + '-' + cellObj.columnVal);\n        e.innerHTML = '<span style=\"font-size:100px; color:white;\">×</span>';\n    }\n}",
    "static": true,
    "longname": "src/cpu.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "miniMax",
    "memberof": "src/cpu.js",
    "static": true,
    "longname": "src/cpu.js~miniMax",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/cpu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/miniMax.js~MiniMax"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "class",
    "name": "Cpu",
    "memberof": "src/cpu.js",
    "static": true,
    "longname": "src/cpu.js~Cpu",
    "access": null,
    "export": true,
    "importPath": "tic_tac_toe_js/src/cpu.js",
    "importStyle": "Cpu",
    "description": "CPUのプレーヤーを表すためのクラス",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "doMove",
    "memberof": "src/cpu.js~Cpu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cpu.js~Cpu#doMove",
    "access": null,
    "description": "打ち手を打つためのメソッド",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "depth"
        ],
        "spread": false,
        "optional": false,
        "name": "読みの深さ",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "board"
        ],
        "spread": false,
        "optional": false,
        "name": "Boardクラスのインスタンス",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Board from './board.js';\nimport Cpu from './cpu.js';\nimport Judge from './judge.js';\n\nconst board = new Board(3, 3);\nconst cpu = new Cpu('cpu', '×', board);\nconst judge = new Judge(3, 3, 3);\n\nlet idArray = ['0-0', '0-1', '0-2', '1-0', '1-1', '1-2', '2-0', '2-1', '2-2'];\n\nfor (let id of idArray) {\n    let e = document.getElementById(id);\n    e.addEventListener('click', () => {\n        let rowColumn = id.split('-');\n        let row = Number(rowColumn[0]);\n        let column = Number(rowColumn[1]);\n\n        let cellMove = board.getMove(row, column);\n\n        if (cellMove === ' ') {\n            board.putMove(row, column, '○');\n\n            let result = judge.judgeResult(board);\n            console.log('result:' + result);\n\n            if (result === '引き分け') {\n                window.alert(result);\n                document.getElementById('table').innerHTML = '<p style=\"font-size:40px;\"><span style=\"color:red;\">' + result + '</span>だ</p>';\n            } else if (result !== '未決') {\n                window.alert(result);\n                document.getElementById('table').innerHTML = '<p style=\"font-size:40px;\">君の<span style=\"color:red;\">' + result + '</span>だ</p>';\n            }\n\n            e.innerHTML = '<span style=\"font-size:70px; color:white;\">' + board.getMove(row, column) + '</span>';\n\n            let depth = 3;\n\n            cpu.doMove(depth, board);\n\n            let result2 = judge.judgeResult(board);\n            console.log('result:' + result2);\n\n            if (result === '引き分け') {\n                window.alert(result);\n                document.getElementById('table').innerHTML = '<p style=\"font-size:40px;\"><span style=\"color:red;\">' + result2 + '</span>だ</p>';\n            } else if (result2 !== '未決') {\n                window.alert(result2);\n                document.getElementById('table').innerHTML = '<p style=\"font-size:40px;\">君の<span style=\"color:red;\">' + result2 + '</span>だ</p>';\n            }\n\n        } else {\n            window.alert('石はすでに置いてある! 他のところを選んで!');\n        }\n    });\n\n}\n\n\n",
    "static": true,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "name": "board",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~board",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/board.js~Board"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "name": "cpu",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~cpu",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/cpu.js~Cpu"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "name": "judge",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~judge",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/judge.js~Judge"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "variable",
    "name": "idArray",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~idArray",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "file",
    "name": "src/judge.js",
    "content": "// フィールドをprivate化するための処理\nlet _rowSize = new WeakMap();\nlet _columnSize = new WeakMap();\nlet _judgeCriteriaSequence = new WeakMap();\nlet _rowMax = new WeakMap();\nlet _columnMax = new WeakMap();\n\n/**\n * 勝敗を審判するためのクラス\n */\nexport default class Judge {\n\n    /**\n    * コンストラクタ\n    * @param {rowSize} rowのサイズ\n    * @param {columnSize} columnのサイズ\n    * @param {judgeCriteriaSequence} 勝敗の基準となる数（何個同じ打ち手が一列に揃えば勝敗が決定するか）\n    */\n    constructor(rowSize, columnSize, judgeCriteriaSequence) {\n        _rowSize.set(this, rowSize);\n        _columnSize.set(this, columnSize);\n        _judgeCriteriaSequence.set(this, judgeCriteriaSequence);\n        _rowMax.set(this, _rowSize.get(this) - _judgeCriteriaSequence.get(this) + 1);\n        _columnMax.set(this, _columnSize.get(this) - _judgeCriteriaSequence.get(this) + 1);\n    }\n    /**\n     * 勝敗はついているかを確認し、その結果を返すためのメソッド\n     * @param {board} Boardクラスのインスタンス\n     * @return {boolean} 勝敗の結果\n     */\n    judgeResult(board) {\n        let gameBoard = board.getGameBoardState();\n\n        if (this.judgeWin(gameBoard)) {\n            return '勝ち';\n        } else if (this.judgeLose(gameBoard)) {\n            return '負け';\n        } else if (this.judgeDraw(gameBoard)) {\n            return '引き分け';\n        }\n        return '未決';\n    }\n\n    /**\n     * ユーザーが勝利したかどうかを確認するためのメソッド\n     * 縦、横、左斜め、右斜めを走査する\n     * @param {gameBoard} ゲーム盤\n     * @return {boolean} ユーザーが勝利したかどうかの真偽値\n     */\n    judgeWin(gameBoard) {\n        return this.judgeRow(gameBoard, '○')\n            || this.judgeColumn(gameBoard, '○')\n            || this.judgeLeftSlanting(gameBoard, '○')\n            || this.judgeRightSlanting(gameBoard, '○');\n    }\n    /**\n     * ユーザーが敗北したかどうかを確認するためのメソッド\n     * 縦、横、左斜め、右斜めを走査する\n     * @param {gameBoard} ゲーム盤\n     * @return {boolean} ユーザーが敗北したかどうかの真偽値\n     */\n    judgeLose(gameBoard) {\n        return this.judgeRow(gameBoard, '×')\n            || this.judgeColumn(gameBoard, '×')\n            || this.judgeLeftSlanting(gameBoard, '×')\n            || this.judgeRightSlanting(gameBoard, '×');\n    }\n\n    /**\n     * 引き分けかどうかを確認するためのメソッド\n     * @param {gameBoard} ゲーム盤\n     * @return {boolean} 引き分けかどうかの真偽値\n     */\n    judgeDraw(gameBoard) {\n        for (let row = 0; row < _rowSize.get(this); row++) {\n            for (let column = 0; column < _columnSize.get(this); column++) {\n                if (gameBoard[row][column] === ' ') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * row(横のライン)が引数で指定された打ち手で5連が達成されているか確認するためのメソッド\n     * @param {gameBoard} ゲーム盤\n     * @param {moves} 打ち手\n     * @return {boolean} 勝敗が決定したか真偽値\n     */\n    judgeRow(gameBoard, moves) {\n        for (let row = 0; row < _rowSize.get(this); row++) {\n            for (let column = 0; column < _columnMax.get(this); column++) {\n                if (this.checkARow(gameBoard, moves, row, column)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * rowにおいて指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値を返すメソッド\n     * @param {gameBoard} ゲーム盤\n     * @param {moves} 打ち手\n     * @return {boolean} 指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値\n     */\n    checkARow(gameBoard, moves, row, column) {\n        for (let difference = 0; difference < _judgeCriteriaSequence.get(this); difference++) {\n            if (gameBoard[row][column + difference] != moves) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * column(縦のライン)が引数で指定されたMoveで5連が達成されているか確認するためのメソッド\n     * @param {gameBoard} ゲーム盤\n     * @param {moves} 打ち手\n     * @return {boolean} 勝敗が決定したか真偽値\n     */\n    judgeColumn(gameBoard, moves) {\n        for (let column = 0; column < _columnSize.get(this); column++) {\n            for (let row = 0; row < _rowMax.get(this); row++) {\n                if (this.checkAColumn(gameBoard, moves, row, column)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * columnにおいて指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値を返すメソッド\n     * @param {gameBoard} ゲーム盤\n     * @param {moves} 打ち手\n     * @param {row}       rowのインデックス\n     * @param {column}    columnのインデックス\n     * @return {boolean} 指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値\n     */\n    checkAColumn(gameBoard, moves, row, column) {\n        for (let difference = 0; difference < _judgeCriteriaSequence.get(this); difference++) {\n            if (gameBoard[row + difference][column] != moves) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 左斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n     * @param {gameBoard} ゲーム盤\n     * @param {moves} 打ち手\n     * @return {boolean} 右斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n     */\n    judgeLeftSlanting(gameBoard, moves) {\n\n        // centerAxis\n        let column = 0;\n\n        for (let row = 0; row < _rowMax.get(this); row++) {\n            // 1回あたりの5連\n            let oneTermCheck = this.checkOneTermLeftSlanting(gameBoard, moves, row, column);\n            if (oneTermCheck) {\n                return true;\n            }\n            column++;\n        }\n\n\n        // rowシフト\n        for (let rowStart = 1; rowStart < _judgeCriteriaSequence.get(this); rowStart++) {\n            let rowShiftCheck = this.leftSlantingRowShift(gameBoard, moves, rowStart);\n            if (rowShiftCheck) {\n                return true;\n            }\n        }\n\n        // columnシフト\n        for (let columnStart = 0; columnStart < _columnMax.get(this); columnStart++) {\n            let columnShiftCheck = this.leftSlantingColumnShift(gameBoard, moves, columnStart);\n            if (columnShiftCheck) {\n                return true;\n            }\n        }\n\n\n        return false;\n    }\n\n    /**\n     * 左ラインのROWがスライドした時の審査を行うためのメソッド\n     *\n     * @param {gameBoard} ゲーム盤\n     * @param {moves}     検査対象のプレーヤーの打ち手\n     * @return  {boolean} 勝敗が決定したか真偽値\n     */\n    leftSlantingRowShift(gameBoard, moves, rowStart) {\n        let column = 0;\n\n        // for文1回で、1つの連を表す\n        for (let row = rowStart; row < _rowMax.get(this); row++) {\n            let oneTermCheck = checkOneTermLeftSlanting(gameBoard, moves, row, column);\n            if (oneTermCheck) {\n                return true;\n            }\n\n            column++;\n        }\n        return false;\n    }\n\n\n    /**\n      * 左ラインのROWがスライドした時の審査を行うためのメソッド\n      *\n      * @param {gameBoard} ゲーム盤\n      * @param {moves}     検査対象のプレーヤーの打ち手\n      * @return  {boolean} 勝敗が決定したか真偽値\n      */\n    leftSlantingColumnShift(gameBoard, moves, columnStart) {\n        let row = 0;\n\n        // for文1回で、1つの連を表す\n        for (let column = columnStart; column < _columnMax.get(this); column++) {\n            let oneTermCheck = this.checkOneTermLeftSlanting(gameBoard, moves, row, column);\n            if (oneTermCheck) {\n                return true;\n            }\n\n            row++;\n        }\n        return false;\n    }\n    /**\n      * 左斜めのラインの1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n      *\n      * @param {gameBoard} ゲーム盤\n      * @param {moves}     打ち手\n      * @param {row}      rowのインデックス\n      * @param {column}    columnのインデックス\n      * @return {boolean}  1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値\n      */\n    checkOneTermLeftSlanting(gameBoard, moves, row, column) {\n\n        for (let difference = 0; difference < _judgeCriteriaSequence.get(this); difference++) {\n            if (gameBoard[row + difference][column + difference] != moves) {\n                return false;\n            }\n        }\n        return true;\n\n    }\n    /**\n      * 右斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n      *\n      * @param {gameBoard} ゲーム盤\n      * @param {moves}     打ち手\n      * @return {boolean} 右斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n      */\n    judgeRightSlanting(gameBoard, moves) {\n\n        // centerAxis\n        let column = _columnSize.get(this) - 1;\n\n        for (let row = 0; row < _rowMax.get(this); row++) {\n            // 1回あたりの5連\n            let oneTermCheck = this.checkOneTermRightSlanting(gameBoard, moves, row, column);\n            if (oneTermCheck) {\n                return true;\n            }\n            column--;\n        }\n\n        // rowシフト\n        for (let rowStart = 1; rowStart < _judgeCriteriaSequence.get(this); rowStart++) {\n            let rowShiftCheck = this.rightSlantingRowShift(gameBoard, moves, rowStart);\n            if (rowShiftCheck) {\n                return true;\n            }\n        }\n        // columnシフト\n        const start = gameBoard.length - 1;\n        for (let columnStart = start; columnStart > _rowSize.get(this) - _judgeCriteriaSequence.get(this) - 1; columnStart--) {\n            let columnShiftCheck = this.rightSlantingColumnShift(gameBoard, moves, columnStart);\n            if (columnShiftCheck) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n      * 右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n      *\n      * @param {gameBoard} ゲーム盤\n      * @param {moves}     打ち手\n      * @param {rowStart}  rowの調査開始値\n      * @return {boolean} 右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値\n      */\n    rightSlantingRowShift(gameBoard, moves, rowStart) {\n        const column = _columnSize.get(this) - 1;\n\n        for (let row = rowStart; row < _rowMax.get(this); row++) {\n            // 1回あたりの5連\n            let oneTermCheck = this.checkOneTermRightSlanting(gameBoard, moves, row, column);\n            if (oneTermCheck) {\n                return true;\n            }\n            column--;\n        }\n        return false;\n    }\n    /**\n      * 右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n      *\n      * @param {gameBoard}   ゲーム盤\n      * @param {moves}       打ち手\n      * @param {columnStart} rowの調査開始値\n      * @return {boolean} 右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値\n      */\n    rightSlantingColumnShift(gameBoard, moves, columnStart) {\n        let row = 0;\n\n        const columnEnd = _judgeCriteriaSequence.get(this) - 2;\n        for (let column = columnStart; column > columnEnd; column--) {\n            // 1回あたりの5連\n            let oneTermCheck = this.checkOneTermRightSlanting(gameBoard, moves, row, column);\n            if (oneTermCheck) {\n                return true;\n            }\n            row++;\n        }\n        return false;\n    }\n    /**\n      * 右斜めのライン1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド\n      *\n      * @param {gameBoard} ゲーム盤\n      * @param {moves}     打ち手\n      * @param {row}       rowのインデックス\n      * @param {column}    columnのインデックス\n      * @return {boolean} 1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値\n      */\n    checkOneTermRightSlanting(gameBoard, moves, row, column) {\n\n        for (let difference = 0; difference < _judgeCriteriaSequence.get(this); difference++) {\n            if (gameBoard[row + difference][column - difference] != moves) {\n                return false;\n            }\n        }\n        return true;\n\n    }\n\n}",
    "static": true,
    "longname": "src/judge.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 27,
    "kind": "variable",
    "name": "_rowSize",
    "memberof": "src/judge.js",
    "static": true,
    "longname": "src/judge.js~_rowSize",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/judge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "variable",
    "name": "_columnSize",
    "memberof": "src/judge.js",
    "static": true,
    "longname": "src/judge.js~_columnSize",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/judge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "name": "_judgeCriteriaSequence",
    "memberof": "src/judge.js",
    "static": true,
    "longname": "src/judge.js~_judgeCriteriaSequence",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/judge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "variable",
    "name": "_rowMax",
    "memberof": "src/judge.js",
    "static": true,
    "longname": "src/judge.js~_rowMax",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/judge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "variable",
    "name": "_columnMax",
    "memberof": "src/judge.js",
    "static": true,
    "longname": "src/judge.js~_columnMax",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/judge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "class",
    "name": "Judge",
    "memberof": "src/judge.js",
    "static": true,
    "longname": "src/judge.js~Judge",
    "access": null,
    "export": true,
    "importPath": "tic_tac_toe_js/src/judge.js",
    "importStyle": "Judge",
    "description": "勝敗を審判するためのクラス",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 33,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#constructor",
    "access": null,
    "description": "コンストラクタ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "rowSize"
        ],
        "spread": false,
        "optional": false,
        "name": "rowのサイズ",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "columnSize"
        ],
        "spread": false,
        "optional": false,
        "name": "columnのサイズ",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "judgeCriteriaSequence"
        ],
        "spread": false,
        "optional": false,
        "name": "勝敗の基準となる数（何個同じ打ち手が一列に揃えば勝敗が決定するか）",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "judgeResult",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeResult",
    "access": null,
    "description": "勝敗はついているかを確認し、その結果を返すためのメソッド",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "board"
        ],
        "spread": false,
        "optional": false,
        "name": "Boardクラスのインスタンス",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "勝敗の結果"
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "judgeWin",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeWin",
    "access": null,
    "description": "ユーザーが勝利したかどうかを確認するためのメソッド\n縦、横、左斜め、右斜めを走査する",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ユーザーが勝利したかどうかの真偽値"
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "judgeLose",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeLose",
    "access": null,
    "description": "ユーザーが敗北したかどうかを確認するためのメソッド\n縦、横、左斜め、右斜めを走査する",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ユーザーが敗北したかどうかの真偽値"
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "judgeDraw",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeDraw",
    "access": null,
    "description": "引き分けかどうかを確認するためのメソッド",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "引き分けかどうかの真偽値"
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "judgeRow",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeRow",
    "access": null,
    "description": "row(横のライン)が引数で指定された打ち手で5連が達成されているか確認するためのメソッド",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "勝敗が決定したか真偽値"
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "checkARow",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#checkARow",
    "access": null,
    "description": "rowにおいて指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値を返すメソッド",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値"
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "judgeColumn",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeColumn",
    "access": null,
    "description": "column(縦のライン)が引数で指定されたMoveで5連が達成されているか確認するためのメソッド",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "勝敗が決定したか真偽値"
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "checkAColumn",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#checkAColumn",
    "access": null,
    "description": "columnにおいて指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値を返すメソッド",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "row"
        ],
        "spread": false,
        "optional": false,
        "name": "rowのインデックス",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "column"
        ],
        "spread": false,
        "optional": false,
        "name": "columnのインデックス",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "指定された打ち手が、ゲーム盤上の指定された範囲内で勝敗を決定する数分連続しているかの真偽値"
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "judgeLeftSlanting",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeLeftSlanting",
    "access": null,
    "description": "左斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "右斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド"
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "leftSlantingRowShift",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#leftSlantingRowShift",
    "access": null,
    "description": "左ラインのROWがスライドした時の審査を行うためのメソッド",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "検査対象のプレーヤーの打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "勝敗が決定したか真偽値"
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "leftSlantingColumnShift",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#leftSlantingColumnShift",
    "access": null,
    "description": "左ラインのROWがスライドした時の審査を行うためのメソッド",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "検査対象のプレーヤーの打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "勝敗が決定したか真偽値"
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "checkOneTermLeftSlanting",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#checkOneTermLeftSlanting",
    "access": null,
    "description": "左斜めのラインの1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "row"
        ],
        "spread": false,
        "optional": false,
        "name": "rowのインデックス",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "column"
        ],
        "spread": false,
        "optional": false,
        "name": "columnのインデックス",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値"
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "judgeRightSlanting",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#judgeRightSlanting",
    "access": null,
    "description": "右斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "右斜めのラインにおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド"
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "rightSlantingRowShift",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#rightSlantingRowShift",
    "access": null,
    "description": "右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "rowStart"
        ],
        "spread": false,
        "optional": false,
        "name": "rowの調査開始値",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値"
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "rightSlantingColumnShift",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#rightSlantingColumnShift",
    "access": null,
    "description": "右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド",
    "lineNumber": 321,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "columnStart"
        ],
        "spread": false,
        "optional": false,
        "name": "rowの調査開始値",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "右斜めのラインがrowにおいてシフトする時(row1~row4)、引数で受け取った打ち手が5連揃っているかどうかの真偽値"
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "checkOneTermRightSlanting",
    "memberof": "src/judge.js~Judge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/judge.js~Judge#checkOneTermRightSlanting",
    "access": null,
    "description": "右斜めのライン1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値を確認するためのメソッド",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "moves"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "row"
        ],
        "spread": false,
        "optional": false,
        "name": "rowのインデックス",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "column"
        ],
        "spread": false,
        "optional": false,
        "name": "columnのインデックス",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "1回あたりおいて、引数で受け取った打ち手が5連揃っているかどうかの真偽値"
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/miniMax.js",
    "content": "import ScoreCalculator from './scoreCalculator.js';\n\nconst scoreCalculator = new ScoreCalculator(3, 3, 3, 30, -30);\n\n/**\n * ミニマックスアルゴリズムを表したクラス\n */\nexport default class MiniMax {\n\n    /**\n     * ミニマックスアルゴリズムαβ法を用い、引数で渡された打ち手のプレイヤーに取って最適な点数とゲーム盤の場所を返すメソッド\n     * CPUの場合は、最大の点数とその点数を取り得るゲーム盤の場所を返し、USERの場合は、点数とその点数を取り得るゲーム盤の場所を返す\n     * <p>\n     * このメソッドのアルゴリズム\n     * 【CPUの場合】\n     * 現在のゲーム木の深さの1個下の階層の点数をMinMaxで取得する\n     * その取得した点数が現在保持している一番高い点数（ベストスコア）よりも高い場合は、その点数が保持されるベストスコアとなる\n     * <p>\n     * 【USERの場合】\n     * 現在のゲーム木の深さの1個下の階層の点数をMinMaxで取得する\n     * その取得した点数が現在保持している一番低い点数（ベストスコア）よりも低い場合は、その点数が保持されるベストスコアとなる\n     *\n     * @param {depth}      探索の深さ\n     * @param {board} Boardクラスのインスタンス\n     * @param {playerSignal} Playerの打ち手 \n     * @param {alpha}      α\n     * @param {beta}       β\n     * @return {object} 打ち手を打つのに最適な場所とそこに打ち手を打った場合の点数を格納したオブジェクト\n     */\n    calcMiniMax(depth, board, playerSignal, alpha, beta) {\n        console.log('calcMiniMaxメソッドが呼ばれました');\n\n        let capableMovesArray = this.makeCapableMoveArray(board);\n\n        console.log('前');\n        let score;\n        let row = -1;\n        let column = -1;\n\n        console.log('後');\n\n        // 試合が終了か、深さが0の場合は、スコアを\n        if (capableMovesArray.length === 0 || depth === 0) {\n\n            console.log('---capableMovesArray.length---' + capableMovesArray.length);\n            console.log('---depth---' + depth);\n\n\n            // ここ要変更\n            score = scoreCalculator.calcScore(board.getGameBoardState());\n\n            console.log('1段目');\n            return { rowVal: row, columnVal: column, bestScore: score };\n        } else {\n            // CPUの点数であるαの方が、βよりも大きい場合、それ以上探索しなくても良い(その時のαが最大なので)ので、探索を打ち切る\n            for (let cell of capableMovesArray) {\n\n                board.putMove(cell.rowValue, cell.columnValue, playerSignal);\n\n                if (playerSignal === '×') {\n                    score = this.calcMiniMax(depth - 1, board, '○', alpha, beta).bestScore;\n                    if (score > alpha) {\n                        alpha = score;\n                        row = cell.rowValue;\n                        column = cell.columnValue;\n\n                    }\n                } else if (playerSignal === '○') {\n                    score = this.calcMiniMax(depth - 1, board, '×', alpha, beta).bestScore;\n                    if (score < beta) {\n                        beta = score;\n                        row = cell.rowValue;\n                        column = cell.columnValue;\n                    }\n                }\n                board.putMove(cell.rowValue, cell.columnValue, ' ');\n\n                if (alpha >= beta) break;\n            }\n\n            return (playerSignal === '×') ? { rowVal: row, columnVal: column, bestScore: alpha } : { rowVal: row, columnVal: column, bestScore: beta };\n        }\n\n    }\n\n    /**\n      * 現在の打ち手を打つことが可能なすべてのゲーム盤の場所をリスト化する（NO_MOVEが存在しているGameBoardの場所）\n      *\n      * @param {board} Boardクラスのインスタンス\n      * @return {Object} NO_MOVEが存在するGameBoard上の場所の一覧を格納したオブジェクト\n      */\n    makeCapableMoveArray(board) {\n        let capableMovesArray = [];\n        console.log('makeCapableMoveArrayメソッドが呼ばれました');\n\n        for (let row = 0; row < board.getRowSize(); row++) {\n            for (let column = 0; column < board.getColumnSize(); column++) {\n                if (board.getMove(row, column) === ' ') {\n                    let cellObj = { rowValue: row, columnValue: column };\n                    capableMovesArray.push(cellObj);\n                }\n            }\n        }\n        console.log('capableMovesArray:' + JSON.stringify(capableMovesArray));\n        return capableMovesArray;\n    }\n\n}",
    "static": true,
    "longname": "src/miniMax.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "scoreCalculator",
    "memberof": "src/miniMax.js",
    "static": true,
    "longname": "src/miniMax.js~scoreCalculator",
    "access": null,
    "export": false,
    "importPath": "tic_tac_toe_js/src/miniMax.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/scoreCalculator.js~ScoreCalculator"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "MiniMax",
    "memberof": "src/miniMax.js",
    "static": true,
    "longname": "src/miniMax.js~MiniMax",
    "access": null,
    "export": true,
    "importPath": "tic_tac_toe_js/src/miniMax.js",
    "importStyle": "MiniMax",
    "description": "ミニマックスアルゴリズムを表したクラス",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "calcMiniMax",
    "memberof": "src/miniMax.js~MiniMax",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/miniMax.js~MiniMax#calcMiniMax",
    "access": null,
    "description": "ミニマックスアルゴリズムαβ法を用い、引数で渡された打ち手のプレイヤーに取って最適な点数とゲーム盤の場所を返すメソッド\nCPUの場合は、最大の点数とその点数を取り得るゲーム盤の場所を返し、USERの場合は、点数とその点数を取り得るゲーム盤の場所を返す\n<p>\nこのメソッドのアルゴリズム\n【CPUの場合】\n現在のゲーム木の深さの1個下の階層の点数をMinMaxで取得する\nその取得した点数が現在保持している一番高い点数（ベストスコア）よりも高い場合は、その点数が保持されるベストスコアとなる\n<p>\n【USERの場合】\n現在のゲーム木の深さの1個下の階層の点数をMinMaxで取得する\nその取得した点数が現在保持している一番低い点数（ベストスコア）よりも低い場合は、その点数が保持されるベストスコアとなる",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "depth"
        ],
        "spread": false,
        "optional": false,
        "name": "探索の深さ",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "board"
        ],
        "spread": false,
        "optional": false,
        "name": "Boardクラスのインスタンス",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "playerSignal"
        ],
        "spread": false,
        "optional": false,
        "name": "Playerの打ち手",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "alpha"
        ],
        "spread": false,
        "optional": false,
        "name": "α",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "beta"
        ],
        "spread": false,
        "optional": false,
        "name": "β",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "打ち手を打つのに最適な場所とそこに打ち手を打った場合の点数を格納したオブジェクト"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "makeCapableMoveArray",
    "memberof": "src/miniMax.js~MiniMax",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/miniMax.js~MiniMax#makeCapableMoveArray",
    "access": null,
    "description": "現在の打ち手を打つことが可能なすべてのゲーム盤の場所をリスト化する（NO_MOVEが存在しているGameBoardの場所）",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "board"
        ],
        "spread": false,
        "optional": false,
        "name": "Boardクラスのインスタンス",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "NO_MOVEが存在するGameBoard上の場所の一覧を格納したオブジェクト"
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/scoreCalculator.js",
    "content": "import Counter from './counter.js';\n\nexport default class ScoreCalculator {\n    /**\n     * 得点の計算を行うためのメソッド\n     * @param {gameBoard} ゲーム盤\n     * @return {number} 合計得点\n     */\n    calcScore(gameBoard) {\n\n        let totalScore = 0;\n        const arraySize = 3;\n        let movesArray = new Array(arraySize);\n\n        const maxPoint = 30;\n        const minPoint = -30;\n        const maxLength = 3;\n\n\n        // row\n        for (let row = 0; row < maxLength; row++) {\n            for (let column = 0; column < maxLength; column++) {\n                movesArray[column] = gameBoard[row][column];\n            }\n            totalScore += this.calcLineScore(movesArray);\n        }\n\n        // column\n        for (let column = 0; column < maxLength; column++) {\n            for (let row = 0; row < maxLength; row++) {\n                movesArray[row] = gameBoard[row][column];\n            }\n            totalScore += this.calcLineScore(movesArray);\n        }\n\n\n        // 左斜め\n        for (let idx = 0; idx < maxLength; idx++) {\n            movesArray[idx] = gameBoard[idx][idx];\n        }\n        totalScore += this.calcLineScore(movesArray);\n\n\n        // 右斜め\n        let column = 2;\n\n        for (let row = 0; row < maxLength; row++) {\n            movesArray[row] = gameBoard[row][column];\n\n            column--;\n        }\n\n        totalScore += this.calcLineScore(movesArray);\n        Counter.resetCount();\n\n        return totalScore;\n    }\n\n\n    /**\n     * 1ラインの得点を計算するためのメソッッド\n     * @param {movesArray} 打ち手を格納するための配列\n     * @return {number} 得点\n     */\n    calcLineScore(movesArray) {\n        let score = 0;\n\n        // 1つ目\n        if (movesArray[0] === '×') {\n            score = 1;\n        } else if (movesArray[0] === '○') {\n            score = -1;\n        }\n\n        // 2つ目\n        if (movesArray[1] === '×') {\n            if (score === 1) {\n                score = 10;\n            } else if (score === -1) {\n                return 0;\n            } else {\n                score = 1;\n            }\n        } else if (movesArray[1] === '○') {\n            if (score === -1) {\n                score = -10;\n            } else if (score === 1) {\n                return 0;\n            } else {\n                score = -1;\n            }\n        }\n\n        // 3つ目\n        if (movesArray[2] === '×') {\n            if (score > 0) {\n                score *= 10;\n            } else if (score < 0) {\n                return 0;\n            } else {\n                score = 1;\n            }\n        } else if (movesArray[2] === '○') {\n            if (score < 0) {\n                score *= 10;\n            } else if (score > 1) {\n                return 0;\n            } else {\n                score = -1;\n            }\n        }\n        return score;\n    }\n}",
    "static": true,
    "longname": "src/scoreCalculator.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "ScoreCalculator",
    "memberof": "src/scoreCalculator.js",
    "static": true,
    "longname": "src/scoreCalculator.js~ScoreCalculator",
    "access": null,
    "export": true,
    "importPath": "tic_tac_toe_js/src/scoreCalculator.js",
    "importStyle": "ScoreCalculator",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "calcScore",
    "memberof": "src/scoreCalculator.js~ScoreCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scoreCalculator.js~ScoreCalculator#calcScore",
    "access": null,
    "description": "得点の計算を行うためのメソッド",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "gameBoard"
        ],
        "spread": false,
        "optional": false,
        "name": "ゲーム盤",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "合計得点"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "calcLineScore",
    "memberof": "src/scoreCalculator.js~ScoreCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scoreCalculator.js~ScoreCalculator#calcLineScore",
    "access": null,
    "description": "1ラインの得点を計算するためのメソッッド",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "movesArray"
        ],
        "spread": false,
        "optional": false,
        "name": "打ち手を格納するための配列",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "得点"
    }
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]